//package main
//
//import (
//
//    "fmt"
//    "sync"
//)
//
//func consumer(messages <- chan int, shutdown <- chan int, wg *sync.WaitGroup) {
//    defer wg.Done()
//    for {
//        select {
//        case message, ok := <- messages:
//            //do something.
//            if ok {
//                fmt.Println(message)
//            } else {
//                //no data , exit.
//                fmt.Println("no data, exit.")
//                return
//            }
//        case _ = <- shutdown:
//            //we `re done!
//            //shutdown now , messages buffered channel data may be lost.
//            fmt.Println("all done!")
//            return
//        }
//    }
//}
//
//func main() {
//    shutdown := make(chan int)
//    messages := make(chan int, 16)
//
//    wg := &sync.WaitGroup{}
//    wg.Add(1)
//    go consumer(messages, shutdown, wg)
//    for i := 0; i < 10; i++ {
//        messages <- i
//    }
//    close(messages)
//    fmt.Println("wait!")
//    wg.Wait()
//
//
//}

package main

import (
	"fmt"
	"strconv"
)

//type AutoGenerated struct {
// Age int    `json:"age"`
// Name   string `json:"name"`
// Child []int `json:"child"`
//}
//
//func main() {
//     jsonStr1 := `{"age": 14,"name": "potter", "child":[1,2,3]}`
//     a := AutoGenerated{}
//     json.Unmarshal([]byte(jsonStr1), &a)
//     aa := a.Child
//     fmt.Println(aa)
//
//     jsonStr2 := `{"age": 12,"name": "potter", "child":[3,4,5,7,8,9]}`
//     json.Unmarshal([]byte(jsonStr2), &a)
//     fmt.Println(aa)
//}

//func main() {
//	//file, err := os.Open("D:\\GoleGolas\\随手记\\端口扫描器\\log\\192.168.3.5_port.txt")
//	//if err != nil {
//	//	fmt.Println(err)
//	//	return
//	//}
//	//defer file.Close()
//	//
//	//fileinfo, err := file.Stat()
//	//if err != nil {
//	//	fmt.Println(err)
//	//	return
//	//}
//	//
//	//filesize := fileinfo.Size()
//	//buffer := make([]byte, filesize)
//	//
//	//bytesread, err := file.Read(buffer)
//	//if err != nil {
//	//	fmt.Println(err)
//	//	return
//	//}
//	//fmt.Println("bytes read: ", bytesread)
//	//fmt.Println("bytestream to string: ", string(buffer))
//	content, err := ioutil.ReadFile("D:\\GoleGolas\\随手记\\端口扫描器\\log\\192.168.3.5_port.txt")
//	if err != nil {
//		panic(err)
//	}
//	fmt.Println(string(content))
//}

func new1() {
	newports := []int{22, 25, 110, 111, 3306, 4000, 4369, 5672, 8080, 9104, 9913, 25672, 35729}
	oldports := []int{22, 25, 110, 111, 3306, 4369, 5672, 8080, 9104, 9913, 25672}
	//newports := []int{110, 111, 22, 25, 9913, 35729, 9104, 5672, 4369, 4000, 3306, 25672, 8080}
	//oldports := []int{110, 111, 22, 25, 5672, 3306, 9104, 35729, 4369, 4000, 9913, 25672, 8080}
	fmt.Println(newports)
	fmt.Println(oldports)
	for i := range newports {
		for j := 0; j < len(oldports); j++ {
			if newports[0] == oldports[j] {
				fmt.Println("有相同的端口", newports[0], i)
				newports = newports[1:]
			}
		}
		fmt.Println(newports)
		fmt.Println("新增端口", newports[0], i)
		//fmt.Println(len(newports))
		if len(newports) > 1 {
			newports = newports[1:]
		} else {
			break
		}
	}

}
func new2() {
	//newports := []int{22, 25, 110, 111, 3306, 4000, 4369, 5672, 8080, 9104, 9913, 25672, 35729}
	//oldports := []int{22, 25, 110, 111, 3306, 4369, 5672, 8080, 9104, 9913, 25672}
	oldports := []int{22, 25, 110, 111, 3306, 4000, 4369, 5672, 8080, 9104, 9913, 25672, 35729}
	newports := []int{22, 25, 110, 111, 3306, 4369, 5672, 8080, 9104, 9913, 25672}
	fmt.Println(newports)
	fmt.Println(oldports)
	for i := range newports {
		if InIntSlice(oldports, newports[i]) {
			fmt.Println("相同的端口")
		} else {
			fmt.Println("新增端口：", newports[i])
		}
	}
	for i := range oldports {
		if InIntSlice(newports, oldports[i]) {
			fmt.Println("相同的端口")
		} else {
			fmt.Println("减少端口：", oldports[i])
		}
	}

}

func InIntSlice(haystack []int, needle int) bool {
	for _, e := range haystack {
		if e == needle {
			return true
		}
	}
	return false
}

func main() {
	a := strconv.Itoa(4000)
	msg := fmt.Sprintf("%s关闭端口：%s", ip, strconv.Itoa(newports[i]))
	fmt.Println(a)
}
